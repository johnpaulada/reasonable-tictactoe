// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

function doMove(state, action) {
  if (action.tag) {
    var match = action[0][0];
    if (match.horizontalPosition !== 0 || match.verticalPosition !== 0) {
      return state;
    } else {
      var init = state.board;
      return {
              board: {
                topLeft: /* Player */[/* Cross */1],
                topCenter: init.topCenter,
                topRight: init.topRight,
                middleLeft: init.middleLeft,
                middleCenter: init.middleCenter,
                middleRight: init.middleRight,
                bottomLeft: init.bottomLeft,
                bottomCenter: init.bottomCenter,
                bottomRight: init.bottomRight
              },
              status: state.status,
              turn: /* Circle */0,
              mode: state.mode
            };
    }
  } else {
    return state;
  }
}

var class_tables = /* Cons */[
  0,
  0,
  0
];

function boardToHash(board) {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(0);
    var env = CamlinternalOO.new_variable($$class, "");
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], 0);
}

function initialize(mode, first) {
  return {
          board: {
            topLeft: /* Empty */0,
            topCenter: /* Empty */0,
            topRight: /* Empty */0,
            middleLeft: /* Empty */0,
            middleCenter: /* Empty */0,
            middleRight: /* Empty */0,
            bottomLeft: /* Empty */0,
            bottomCenter: /* Empty */0,
            bottomRight: /* Empty */0
          },
          status: /* Playing */0,
          turn: first,
          mode: mode
        };
}

var state = initialize(/* PVP */0, /* Cross */1);

var action = /* CrossMove */Block.__(1, [/* CrossPosition */[{
        horizontalPosition: /* Left */0,
        verticalPosition: /* Top */0
      }]]);

doMove(state, action);

function leftTopCrossMove(board, moves) {
  if (board.topLeft) {
    return moves;
  } else {
    return /* :: */[
            /* CrossPosition */[{
                horizontalPosition: /* Left */0,
                verticalPosition: /* Top */0
              }],
            moves
          ];
  }
}

function centerTopCrossMove(board, moves) {
  if (board.topCenter) {
    return moves;
  } else {
    return /* :: */[
            /* CrossPosition */[{
                horizontalPosition: /* Center */1,
                verticalPosition: /* Top */0
              }],
            moves
          ];
  }
}

function rightTopCrossMove(board, moves) {
  if (board.topRight) {
    return moves;
  } else {
    return /* :: */[
            /* CrossPosition */[{
                horizontalPosition: /* Right */2,
                verticalPosition: /* Top */0
              }],
            moves
          ];
  }
}

function possibleCrossMoves(board) {
  return rightTopCrossMove(board, centerTopCrossMove(board, leftTopCrossMove(board, /* [] */0)));
}

possibleCrossMoves(state.board);

function takeRandomCrossAction(crossMoves) {
  var shuffledPosition = Belt_List.head(Belt_List.shuffle(crossMoves));
  if (shuffledPosition !== undefined) {
    return /* CrossMove */Block.__(1, [shuffledPosition]);
  }
  
}

console.log(takeRandomCrossAction(possibleCrossMoves(state.board)));

exports.doMove = doMove;
exports.boardToHash = boardToHash;
exports.initialize = initialize;
exports.state = state;
exports.action = action;
exports.leftTopCrossMove = leftTopCrossMove;
exports.centerTopCrossMove = centerTopCrossMove;
exports.rightTopCrossMove = rightTopCrossMove;
exports.possibleCrossMoves = possibleCrossMoves;
exports.takeRandomCrossAction = takeRandomCrossAction;
/* state Not a pure module */
